import socket
import csv
from flask import Flask, render_template, Response
from threading import Thread
import time

app = Flask(__name__)

# Define the server address and port for receiving data from dump1090
RECEIVE_HOST = '127.0.0.1'
RECEIVE_PORT = 30003

# Define the server address and port for forwarding data to the web server
FORWARD_HOST = '127.0.0.1'
FORWARD_PORT = 40000  # Ensure this is the correct port

# A global list to store received messages
messages = []

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/stream')
def stream():
    def event_stream():
        while True:
            if messages:
                message = messages.pop(0)
                print(f'Sending message to web client: {message}')  # Debug statement
                yield f"data: {message}\n\n"
            else:
                time.sleep(1)  # Sleep briefly to avoid busy-waiting
    return Response(event_stream(), content_type='text/event-stream')

def start_forwarding_server():
    # Create a socket to connect to dump1090
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as receive_socket:
        receive_socket.connect((RECEIVE_HOST, RECEIVE_PORT))
        print(f'Connected to dump1090 server at {RECEIVE_HOST}:{RECEIVE_PORT}')
        
        while True:
            try:
                # Create a socket to forward data to another program
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as forward_socket:
                    forward_socket.connect((FORWARD_HOST, FORWARD_PORT))
                    print(f'Connected to forwarding server at {FORWARD_HOST}:{FORWARD_PORT}')
                    
                    with open('output.csv', mode='w', newline='') as file:
                        writer = csv.writer(file)
                        while True:
                            # Receive data from dump1090
                            data = receive_socket.recv(1024)
                            if not data:
                                break
                            # Decode and split the data
                            row = data.decode('utf-8').strip().split(',')
                            # Write data to CSV
                            writer.writerow(row)
                            print(f'Received data: {row}')
                            # Forward data to the other program
                            forward_socket.sendall(data)
                            print(f'Forwarded data: {row}')
                            # Filter and format the data for display
                            if len(row) >= 7:  # Ensure there are enough fields
                                formatted_message = {
                                    'hex': row[0],
                                    'flight': row[1],
                                    'altitude': row[3],
                                    'speed': row[4],
                                    'lat': row[5],
                                    'lon': row[6]
                                }
                                messages.append(formatted_message)
                                print(f'Message appended to list: {formatted_message}')  # Debug statement
            except ConnectionRefusedError:
                print(f'Connection to forwarding server at {FORWARD_HOST}:{FORWARD_PORT} refused. Retrying...')
                time.sleep(5)  # Wait before retrying

def run_flask_app():
    app.run(debug=True, use_reloader=False)

if __name__ == '__main__':
    # Start the forwarding server in a separate thread
    Thread(target=start_forwarding_server).start()
    # Start the Flask web server
    run_flask_app()
